/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ERC20Faucet,
  ERC20FaucetInterface,
} from "../../contracts/ERC20Faucet";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_dripAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_dripInterval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Drip",
    type: "event",
  },
  {
    inputs: [],
    name: "drip",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dripAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dripInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161078c38038061078c83398181016040528101906100329190610121565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160018190555080600281905550505050610174565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100b88261008d565b9050919050565b6100c8816100ad565b81146100d357600080fd5b50565b6000815190506100e5816100bf565b92915050565b6000819050919050565b6100fe816100eb565b811461010957600080fd5b50565b60008151905061011b816100f5565b92915050565b60008060006060848603121561013a57610139610088565b5b6000610148868287016100d6565b93505060206101598682870161010c565b925050604061016a8682870161010c565b9150509250925092565b610609806101836000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806335a1529b146100515780636a2148111461006f5780639f678cca1461008d578063fc0c546a14610097575b600080fd5b6100596100b5565b604051610066919061031e565b60405180910390f35b6100776100bb565b604051610084919061031e565b60405180910390f35b6100956100c1565b005b61009f6102d9565b6040516100ac91906103b8565b60405180910390f35b60015481565b60025481565b60006100cb6102fd565b9050600254600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461011a9190610402565b42101561015c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015390610493565b60405180910390fd5b42600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb836001546040518363ffffffff1660e01b81526004016102009291906104d4565b6020604051808303816000875af115801561021f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610243919061053a565b905080610285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027c906105b3565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f7cad7fbe1215c486c724bf41124e0ed689d280724381379da844556025c463c16001546040516102cd919061031e565b60405180910390a25050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b6000819050919050565b61031881610305565b82525050565b6000602082019050610333600083018461030f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061037e61037961037484610339565b610359565b610339565b9050919050565b600061039082610363565b9050919050565b60006103a282610385565b9050919050565b6103b281610397565b82525050565b60006020820190506103cd60008301846103a9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061040d82610305565b915061041883610305565b92508282019050808211156104305761042f6103d3565b5b92915050565b600082825260208201905092915050565b7f4472697020696e74657276616c206e6f74207061737365640000000000000000600082015250565b600061047d601883610436565b915061048882610447565b602082019050919050565b600060208201905081810360008301526104ac81610470565b9050919050565b60006104be82610339565b9050919050565b6104ce816104b3565b82525050565b60006040820190506104e960008301856104c5565b6104f6602083018461030f565b9392505050565b600080fd5b60008115159050919050565b61051781610502565b811461052257600080fd5b50565b6000815190506105348161050e565b92915050565b6000602082840312156105505761054f6104fd565b5b600061055e84828501610525565b91505092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061059d600f83610436565b91506105a882610567565b602082019050919050565b600060208201905081810360008301526105cc81610590565b905091905056fea2646970667358221220d093d93c1ac5a215ae33f8fe3ebf1e9512a4cefd14ce187be4e46bb79eeb0a8964736f6c63430008140033";

type ERC20FaucetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20FaucetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Faucet__factory extends ContractFactory {
  constructor(...args: ERC20FaucetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _tokenAddress: AddressLike,
    _dripAmount: BigNumberish,
    _dripInterval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _tokenAddress,
      _dripAmount,
      _dripInterval,
      overrides || {}
    );
  }
  override deploy(
    _tokenAddress: AddressLike,
    _dripAmount: BigNumberish,
    _dripInterval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _tokenAddress,
      _dripAmount,
      _dripInterval,
      overrides || {}
    ) as Promise<
      ERC20Faucet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20Faucet__factory {
    return super.connect(runner) as ERC20Faucet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20FaucetInterface {
    return new Interface(_abi) as ERC20FaucetInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20Faucet {
    return new Contract(address, _abi, runner) as unknown as ERC20Faucet;
  }
}
